name: Deploy React App to Hosting Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Step 3: Cache Node.js modules to speed up builds
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Install dependencies and build the React app
    - name: Install dependencies and build
      env:
        NODE_OPTIONS: --openssl-legacy-provider
      run: |
        npm install
        npm run build

    # Step 5: Fix held packages (to resolve dependency conflicts)
    - name: Fix held packages
      run: |
        sudo apt-get update
        sudo apt-get install -f
        sudo dpkg --configure -a

    # Step 6: Install Docker on the runner
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get remove -y containerd
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Step 7: Build Docker image
    - name: Build Docker image
      run: docker build -t react-app .

    # Step 8: Save Docker image
    - name: Save Docker image
      run: docker save react-app > react-app.tar

    # Step 9: Install sshpass
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    # Step 10: Create .ssh directory and add remote host to known_hosts
    - name: Add remote host to known_hosts
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

    # Step 11: Upload Docker image to hosting server
    - name: Upload Docker image to hosting server
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
      run: sshpass -p "$REMOTE_PASSWORD" scp react-app.tar $REMOTE_USER@$REMOTE_HOST:/home/$REMOTE_USER/react-app.tar

    # Step 12: Install Docker on remote server and deploy container
    - name: Deploy Docker container on remote server
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
        PORT: ${{ secrets.APP_PORT }}
      run: |
        sshpass -p "$REMOTE_PASSWORD" ssh $REMOTE_USER@$REMOTE_HOST << EOF
        if ! command -v docker &> /dev/null
        then
          echo "Docker not found, installing Docker..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        fi
        docker load < /home/$REMOTE_USER/react-app.tar
        docker stop react-app || true
        docker rm react-app || true
        docker run -d --name react-app -p $PORT:80 react-app
        rm /home/$REMOTE_USER/react-app.tar
        docker image prune -f
        EOF

    # Step 13: Verify deployment
    - name: Verify deployment
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
      run: |
        sshpass -p "$REMOTE_PASSWORD" ssh $REMOTE_USER@$REMOTE_HOST "docker ps | grep react-app"
